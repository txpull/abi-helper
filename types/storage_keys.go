package types

import (
	"fmt"
	"math/big"

	"github.com/ethereum/go-ethereum/common"
)

// Constants for key prefixes used in the BadgerDB database.
const (
	// databaseContractKeyPrefix is the prefix used for keys related to contracts.
	databaseContractKeyPrefix = "bscscan_verified_contracts_______:%s:%s"

	// databaseMethodKeyPrefix is the prefix used for keys related to methods.
	databaseMethodKeyPrefix = "methods_______:%s:%s"

	// databaseMethodMapperKeyPrefix is the prefix used for keys related to method mappers.
	databaseMethodMapperKeyPrefix = "method_mappers_______:%s:%s"

	// databaseEventKeyPrefix is the prefix used for keys related to events.
	databaseEventKeyPrefix = "method_event_______:%s:%s"

	// databaseEventMapperKeyPrefix is the prefix used for keys related to event mappers.
	databaseEventMapperKeyPrefix = "method_event_mapper_______:%s:%s"
)

// GetContractStorageKeyPrefix returns the prefix used for contract keys in the database.
func GetContractStorageKeyPrefix() string {
	return databaseContractKeyPrefix
}

// GetMethodStorageKeyPrefix returns the prefix used for method keys in the database.
func GetMethodStorageKeyPrefix() string {
	return databaseMethodKeyPrefix
}

// GetMethodMapperStorageKeyPrefix returns the prefix used for method mapper keys in the database.
func GetMethodMapperStorageKeyPrefix() string {
	return databaseMethodMapperKeyPrefix
}

// GetEventStorageKeyPrefix returns the prefix used for event keys in the database.
func GetEventStorageKeyPrefix() string {
	return databaseEventKeyPrefix
}

// GetEventMapperStorageKeyPrefix returns the prefix used for event mapper keys in the database.
func GetEventMapperStorageKeyPrefix() string {
	return databaseEventMapperKeyPrefix
}

// GetContractStorageKey generates a key for a contract in the database using the provided chainId and address.
// The key is generated by appending the hexadecimal representation of the address to the contract key prefix.
func GetContractStorageKey(chainId *big.Int, addr common.Address) string {
	return fmt.Sprintf(databaseContractKeyPrefix, chainId.String(), addr.Hex())
}

// GetMethodStorageKey generates a key for a method in the database using the provided chainId and method.
// The key is generated by appending the hexadecimal representation of the method to the method key prefix.
func GetMethodStorageKey(chainId *big.Int, method []byte) string {
	return fmt.Sprintf(databaseMethodKeyPrefix, chainId.String(), common.Bytes2Hex(method))
}

// GetMethodMapperStorageKey generates a key for a method mapper in the database using the provided chainId and method.
// The key is generated by appending the hexadecimal representation of the method to the method mapper key prefix.
func GetMethodMapperStorageKey(chainId *big.Int, method []byte) string {
	return fmt.Sprintf(databaseMethodMapperKeyPrefix, chainId.String(), common.Bytes2Hex(method))
}

// GetEventStorageKey generates a key for an event in the database using the provided chainId and event.
// The key is generated by appending the hexadecimal representation of the event to the event key prefix.
func GetEventStorageKey(chainId *big.Int, event common.Hash) string {
	return fmt.Sprintf(databaseEventKeyPrefix, chainId.String(), event.Hex())
}

// GetEventMapperStorageKey generates a key for an event mapper in the database using the provided chainId and event.
// The key is generated by appending the hexadecimal representation of the event to the event mapper key prefix.
func GetEventMapperStorageKey(chainId *big.Int, event common.Hash) string {
	return fmt.Sprintf(databaseEventMapperKeyPrefix, chainId.String(), event.Hex())
}
